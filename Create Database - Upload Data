import sqlite3
import pandas as pd
import os
import shutil
import numpy as np
from glob import glob
sqlite3.register_adapter(np.int64, lambda val: int(val))

class StoreDB:
    def __init__(self, path_db, create = False):
        self.db_exists(path_db, create)
        return
    
    def db_exists(self, path_db, create): 
        #Check if the database file exists. If not, then either alert the user or create it if create = True
        if os.path.exists(path_db):
            self.path_db = path_db
        else:
            if create == True:
                conn = sqlite3.connect(path_db)
                conn.close()
                print('Database created at', path_db)
            else:
                raise FileNotFoundError(path_db + ' does not exist')
        return
    
    def connect(self):
        self.conn = sqlite3.connect(self.path_db)
        self.curs = self.conn.cursor()
        self.curs.execute('PRAGMA foreign_keys = ON;')
        return
    
    def close(self):
        self.conn.close()
        return
    
    def run_query(self, sql, params = None):
        self.connect()
        results = pd.read_sql(sql, self.conn, params = params)
        self.close()
        return results

    def product_lookup(self, partial_prod_desc):
        '''
        Find product(s) with the partial_prod_desc in the name, and return the product info
        '''
        sql = """
        SELECT prod_id, prod_desc, unit_price
        FROM tProd
        WHERE prod_desc LIKE '%' || :partial_desc || '%'
        ;"""
        results = self.run_query(sql, {'partial_desc': partial_prod_desc})
        return results
    
    def drop_all_tables(self, are_you_sure = False): #Drop ALL tables from the database
        self.connect()
        try:
            self.curs.execute('DROP TABLE IF EXISTS tOrderDetail;')
            self.curs.execute('DROP TABLE IF EXISTS tProd;')
            self.curs.execute('DROP TABLE IF EXISTS tOrder;')
            self.curs.execute('DROP TABLE IF EXISTS tCust;')
            self.curs.execute('DROP TABLE IF EXISTS tZip;')
            self.curs.execute('DROP TABLE IF EXISTS tState;')
        except Exception as e:
            self.close()
            raise e
        self.close()
        return
    
    def build_tables(self): #Build all tables in the database, assuming they do not exist
        self.connect()
        sql = '''
        CREATE TABLE tCust (
            cust_id INTEGER PRIMARY KEY AUTOINCREMENT,
            first TEXT NOT NULL,
            last TEXT NOT NULL,
            addr TEXT NOT NULL,
            zip TEXT NOT NULL REFERENCES tZip(zip)
        )
        ;'''
        self.curs.execute(sql)
        
        sql = '''
        CREATE TABLE tZip (
            zip TEXT PRIMARY KEY CHECK(length(zip) == 5),
            city TEXT NOT NULL,
            state_id TEXT NOT NULL REFERENCES tState(state_id)
        )
        ;'''
        self.curs.execute(sql)
        
        sql = '''
        CREATE TABLE tState (
            state_id TEXT PRIMARY KEY CHECK(length(state_id) == 2),
            state TEXT NOT NULL
        )
        ;'''
        self.curs.execute(sql)
        
        sql = '''
        CREATE TABLE tOrder (
            order_id INTEGER PRIMARY KEY AUTOINCREMENT,
            cust_id INTEGER NOT NULL REFERENCES tCust(cust_id),
            date TEXT NOT NULL CHECK(date LIKE '____-__-__')
        )
        ;'''
        self.curs.execute(sql)
        
        sql = '''
        CREATE TABLE tOrderDetail (
            order_id INTEGER NOT NULL REFERENCES tOrder(order_id),
            prod_id INTEGER NOT NULL REFERENCES tProd(prod_id),
            qty INTEGER NOT NULL,
            PRIMARY KEY (order_id, prod_id)
        )
        ;'''
        self.curs.execute(sql)
        
        sql = '''
        CREATE TABLE tProd (
            prod_id INTEGER PRIMARY KEY,
            prod_desc TEXT NOT NULL,
            unit_price NUMERIC NOT NULL
        )
        ;'''
        self.curs.execute(sql)
        self.close()
        return
    
    def load_lookup_tables(self):
        #Load any data that does not change (states, zips, products)
        zip = pd.read_csv('data/zips.csv', dtype = {'zip': str})
        state = pd.read_csv('data/states.csv')
        prod = pd.read_csv('data/prods.csv')
        
        sql = '''
            INSERT INTO tState (state_id, state)
            VALUES (:state_id, :state)
        ;'''
        
        self.load_table(sql, state.rename(columns={'st': 'state_id'}))
        
        sql = '''
            INSERT INTO tZip (zip, city, state_id)
            VALUES (CAST(:zip AS TEXT), :city, :state_id)
        ;'''
        
        self.load_table(sql, zip)
        
        sql = '''
            INSERT INTO tProd (prod_id, prod_desc, unit_price)
            VALUES (:prod_id, :prod_desc, :unit_price)
        ;'''
        
        self.load_table(sql, prod.rename(columns={'prod_name': 'prod_desc'}))
        
    def load_new_data(self):
        #Check if there are any new sales files to load, and load them
        file_names = glob('data/to_load/Sales_*.csv')
        file_names.sort()
        if len(file_names) >= 1:
            self.connect()
            for file in file_names: #For each sales filepath...
                data = pd.read_csv(file, dtype = {'zip': str}) #Load as dataframe
                for row in data.to_dict(orient = 'records'): #For each row in sales file...
                    try:
                        cust_id = self.get_cust_id(row['first'], row['last'], row['addr'], str(row['zip']))
                        order_id = self.get_order_id(cust_id, row['date'])

                        sql = '''
                        INSERT INTO tOrderDetail (order_id, prod_id, qty)
                        VALUES (:order_id, :prod_id, :qty)
                        ;'''

                        params = {'order_id': order_id, 'prod_id': row['prod_id'], 'qty': row['qty']}
                        self.curs.execute(sql, params)

                        #might need to select them not sure
                        
                        #Need to finish this part
                
                    except Exception as e:
                        print('Error on row: ', row)
                        print('\n', row)
                        self.conn.rollback()
                        raise e
                        return
                
                destination_path = os.path.join('data/loaded/', os.path.basename(file))
                shutil.move(file, destination_path)
                self.conn.commit()
                print('File ' + file + ' loaded successfully!')
            self.close()
        else:
            print('No new sales data to load!')
            return
        
    def get_cust_id(self, first, last, addr, zip):
        #Check if cust_id exists for this name/addr/zip combo; if so, return it by running a select statement
        select_sql = '''
            SELECT cust_id
            FROM tCust
            WHERE first LIKE :first AND last LIKE :last AND addr LIKE :addr AND zip LIKE :zip
            ;'''

        params = {'first': first, 'last': last, 'addr': addr, 'zip': zip}
        self.curs.execute(select_sql, params)
        results = self.curs.fetchone()

        if results is not None:
            cust_id = results[0]
        else:
            insert_sql = '''
                INSERT INTO tCust (first, last, addr, zip)
                VALUES (:first, :last, :addr, CAST(:zip AS TEXT))
            ;'''

            self.curs.execute(insert_sql, params)
            self.conn.commit()
            self.curs.execute(select_sql, params)
            results = self.curs.fetchone()
            cust_id = results[0]
        return cust_id
        

        
        #If not, create it by running an insert statement
        #Then if needed run another select statement
        #cust_id = #Select statement should go here since that's what we're returning
        #return cust_idhttps://github.com/
    
    def get_order_id(self, cust_id, date):
        #Similar logic to the above
        select_sql = '''
            SELECT order_id
            FROM tOrder
            WHERE cust_id LIKE :cust_id AND date LIKE :date 
            ;'''

        params = {'cust_id': cust_id, 'date': date}
        self.curs.execute(select_sql, params)
        results = self.curs.fetchone()

        if results is not None:
            order_id = results[0]
        else:
            check_cust_sql = '''
                SELECT cust_id
                FROM tCust
                WHERE cust_id = :cust_id
                ;'''
            self.curs.execute(check_cust_sql, params)
            cust_exists = self.curs.fetchone()

            if cust_exists:
                insert_sql = '''
                    INSERT INTO tOrder (cust_id, date)
                    VALUES (:cust_id, :date)
                ;'''
                self.curs.execute(insert_sql, params)
                self.curs.execute(select_sql, params)
                results = self.curs.fetchone()
                order_id = results[0]
            else:
                # Handle the case where cust_id does not exist in tCust
                raise ValueError(f"Customer with cust_id {cust_id} does not exist in tCust table.")
        return order_id

        
        #order_id = #Select statement
        #return order_id
    
    def load_table(self, sql: str, data: pd.DataFrame):
        #SQL statement should have named parameters with names apearing the same in the dataframe
        self.connect()
        for i, row in enumerate(data.to_dict(orient = 'records')):
            try:
                self.curs.execute(sql, row)
            except Exception as e:
                print(e)
                print('\nrow: ', i)
                print('\n', row)
                self.conn.rollback() #Undo everything since last commit since we had an error
                raise e
        self.conn.commit()
        self.close()
        return
